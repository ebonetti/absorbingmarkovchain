// Code generated by go-bindata. DO NOT EDIT.
// sources:
// petsc-gmres/GMRES.c
// petsc-gmres/makefile

package absorbingmarkovchain

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataPetscgmresGMRESc = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x7f\x6f\xe2\x46\x10\xfd\xdf\x9f\x62\xe4\x4a\xc8\x70\x7b\x40\xa4" +
		"\xb6\xaa\xc4\xe5\x24\xc7\x21\x97\x28\xe1\x70\x71\x9a\xab\x74\x77\x42\x6b\x7b\x6c\x56\xc1\xde\xd5\xee\xc2\xc1\x55" +
		"\xf9\xee\xd5\xda\xfc\x30\x60\x93\xa8\xf5\x1f\x16\xd8\xf3\xe6\xbd\x9d\x99\x37\xa0\x34\xd5\x2c\x82\x68\x46\x25\xcc" +
		"\x70\x2e\xbe\x7e\x87\x4b\xb0\xff\x52\x08\x9f\x46\x93\x61\x00\x9a\x83\xe2\xf3\x25\xc2\x9c\xe5\x48\x25\xa8\xb5\xd2" +
		"\x98\xa9\x6f\xf9\xb7\xdc\x1e\x58\xd6\x2f\x2c\x8f\xe6\x8b\x18\xe1\x83\x40\xad\xa2\x67\x25\xba\xb3\x8f\xc7\x4f\x43" +
		"\x9a\x9a\xa7\x96\xa5\xd7\x02\x63\x4c\x40\x69\xb9\x88\xf4\x3f\x16\x00\x80\x6f\x22\xee\x72\x0d\xe5\xc5\x08\xcb\xe8" +
		"\x6a\x50\xbc\x2a\x44\xed\x2f\x96\xe4\x34\xc3\xaf\xfe\xf0\x31\xf0\xa6\x23\xf7\xef\xa9\xef\x3e\xde\x4e\x1f\x86\x9f" +
		"\xbf\x13\xde\xf8\x6a\x60\xbd\x80\x4f\x25\xcd\x50\xa3\x1c\x58\x16\xcb\x35\x64\x94\xe5\x8e\xf9\x40\x65\x1a\x91\x82" +
		"\xa5\xd3\xa1\x32\x5d\xb6\xa1\xa2\xe9\x89\xe1\x0f\x94\x25\x71\x4c\x78\x12\x0f\xe0\xf4\xea\xf5\x12\x36\x47\x58\x16" +
		"\xb1\x05\xf6\x09\xa3\x6a\x40\x58\x87\xda\x62\x27\xb7\x01\xd0\x3c\x06\x2a\x84\xe4\x2b\x53\xe8\x85\x66\x3c\x07\x47" +
		"\xcd\xa8\x64\x79\x0a\x19\x66\x5c\xae\xdb\x45\xe2\x11\xd5\x55\xb4\x7b\x2e\xf1\x41\xb3\x20\xa3\x5a\xb2\x55\x91\xe4" +
		"\x3e\xf0\xab\x91\xcf\x4a\x34\xa5\xd9\x27\x31\xed\x97\x10\xf1\x5c\xe3\x4a\x97\xf5\xf1\x0e\x42\x45\xd4\xa8\xa5\xd7" +
		"\xf3\xbd\x43\xa8\x29\xed\x50\x4a\x2e\x3d\x1e\x23\x30\x94\xb2\x6c\xf6\xae\x49\x25\xb0\x23\xcc\x77\x35\xd8\x83\xae" +
		"\x68\xba\xad\x29\x4d\x07\x56\xf1\xc2\xc0\xe1\x72\x3b\x43\x4c\x33\x3a\x67\x3f\xd1\x69\x15\x8d\x35\xf7\x25\x71\x4c" +
		"\x7f\x3b\xed\x3e\x31\xd3\xdd\x1e\x78\xb7\xf7\xc3\xc9\xe4\x4f\xc7\x20\xdb\x85\xec\xd3\x4c\x57\x34\xf5\x24\x52\x8d" +
		"\x4e\x39\x50\xde\x78\x34\x9a\x7e\x19\x4f\x1e\xae\x89\x62\x3f\x91\x27\xce\x4e\x6c\x9b\xb4\x42\x9a\x1e\xa7\xad\xcb" +
		"\xf8\x09\xf5\x35\xd5\xd4\x09\x69\x4a\x9c\x25\x67\x71\xa7\xd3\x6e\x95\x87\x3c\x81\xd7\xe1\x03\xd4\x9f\x69\x86\x05" +
		"\xde\xde\xf1\x5f\xd1\xd4\x26\xb6\x29\x30\x65\xb9\x02\xb1\x7d\xae\x20\xe1\x12\x54\x24\x99\xd0\xf6\x5b\xe4\x4d\x30" +
		"\x65\x4a\xa3\x0c\xb4\x19\xbc\x82\x65\xa3\xee\xfd\xc7\xd2\x78\xe4\xd4\x5d\xc4\x76\xc3\xae\xd0\x2a\xb2\x89\xcd\x12" +
		"\x9b\xd8\x46\x21\xf0\x04\x58\x2e\x16\x1a\x0a\x6b\x98\xdb\xff\x56\xc0\x9b\x15\x28\x3e\xef\x66\x54\xcf\x69\x68\x13" +
		"\x9b\x57\x45\xf0\x85\xfe\xef\x2a\xca\x8d\x74\x54\x87\x8c\xae\x08\xf4\x89\x6d\x3e\x18\xa2\x45\x16\xa2\x34\x54\x4b" +
		"\x8c\x34\x97\xea\x94\xc1\x2a\x4d\x00\x63\x81\x79\xa5\x2a\x27\xcc\xe5\xb2\xb9\x62\x39\x95\x6b\x13\x7b\x3a\x79\x47" +
		"\xcd\xb8\xb9\x7b\x18\x4e\x47\xe3\xeb\xe1\x74\x32\x74\xaf\x49\x8b\x25\x71\xed\xf1\xb6\xdc\x95\x62\x34\x90\xbb\x81" +
		"\x77\x77\x77\x9e\x7b\xd3\x86\x16\x37\x64\xf0\x4a\x31\xcb\xac\xfe\x42\xcd\x6e\xb8\xcc\xa8\x76\x78\x12\x6f\x3a\xf8" +
		"\x74\x37\xfc\x32\x9c\x4c\x0b\xc6\xe9\xc8\x7d\x7c\x70\xaf\x4e\xf3\x6d\xe5\x3f\x70\x1a\x83\x9e\xe1\x66\x8d\x75\xab" +
		"\x44\x23\xaa\x9b\x9c\xda\x72\xcf\xb5\x7b\x44\xb5\xc9\xeb\xb8\xa4\xae\x70\x5b\xea\xa0\x5c\x7d\x5c\x98\xad\xac\x8a" +
		"\x55\xad\xf9\x1c\x25\xcd\x23\x54\x07\x42\xee\x03\xbf\x51\xc8\xb3\x3a\xd9\x3b\x47\xd0\x00\xf5\xe3\x5a\xa0\xf3\xac" +
		"\x04\xb9\x0f\xfc\xe2\x97\xf7\x18\xd2\xeb\x85\x6b\x88\x31\xa1\x8b\xb9\xee\x1e\x73\x07\xa8\xc7\x02\x25\x35\x43\x58" +
		"\x64\x71\xc9\xd9\xe3\x6f\x38\x77\x67\x29\x30\x17\xf8\xfe\x0f\x73\xbb\xf8\x9d\x5c\xe0\xaf\xe4\xb7\x7e\xff\xec\x62" +
		"\x32\x42\x51\xfb\x5e\x81\x6d\x89\xe8\xac\xbb\xbc\xed\x11\x45\x44\x7c\x2f\x18\x4f\x5e\x4b\x1d\xa0\xbe\x91\x3c\x1b" +
		"\x97\xa5\x77\xea\x6a\x58\x45\x3c\x61\xd4\x58\xff\xb0\x56\x99\xd9\x8f\xce\xce\x54\x97\xfd\x01\xec\xbe\xc0\x07\xa8" +
		"\x5a\xbe\xf2\xe6\xdd\xbb\x76\xf9\x0f\xe1\x90\xba\x18\xa5\xb0\x1c\xa5\x3a\x5b\x1c\x1d\xcd\x4c\x55\x51\xb5\x90\xd4" +
		"\x6b\x3b\xcc\x6e\x8c\xe4\x84\x84\x37\x38\xfc\x65\x3b\xae\x37\x12\x11\x7e\x70\xf9\x0c\x4a\xd0\x08\xbb\x0d\x8e\xbc" +
		"\x46\xa5\x25\x5f\x3b\x8d\x2b\xa3\xc6\xc4\x5c\xec\x3d\xfc\x56\xe7\xef\x78\x9a\x84\xef\x2b\xb2\x0b\x7d\xc5\x2a\x4f" +
		"\x18\xed\x42\xeb\x2b\xb7\xb7\xf7\x2e\xf0\xac\x11\xb6\x6b\x7f\x9f\xf6\x0d\xbf\xe6\x37\x2c\x2f\xff\x67\x6c\xde\x49" +
		"\xd4\x0b\x99\x43\x7f\x60\xbd\x58\xff\x06\x00\x00\xff\xff\xbb\x58\x48\x72\x50\x0b\x00\x00")

func bindataPetscgmresGMREScBytes() ([]byte, error) {
	return bindataRead(
		_bindataPetscgmresGMRESc,
		"petsc-gmres/GMRES.c",
	)
}

func bindataPetscgmresGMRESc() (*asset, error) {
	bytes, err := bindataPetscgmresGMREScBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "petsc-gmres/GMRES.c",
		size:        2896,
		md5checksum: "",
		mode:        os.FileMode(436),
		modTime:     time.Unix(1476884731, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataPetscgmresMakefile = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\xcd\x4e\xc4\x20\x14\x85\xd7\x73\x9f\xe2\x2e\xba\x9d\x61\x3f\xbb" +
		"\xb1\xa2\x92\x19\x94\xd0\x2e\xba\x6b\x28\xd2\x48\xbc\x42\xd3\x1f\x63\xd2\xf0\xee\x06\x9b\xea\xd6\x15\x39\x39\xdf" +
		"\xf9\xb8\x3e\x58\x5a\x5e\x1d\x16\xab\xe2\x75\x55\xb6\xf7\x42\x27\x46\xbe\x63\x83\x9b\x27\xcb\x6c\x0c\x3d\xfb\x34" +
		"\xa3\x37\x1d\xb9\x09\xfe\x43\x8f\x4b\x26\xc1\x10\x9d\xf1\x51\x6a\x5e\x9d\x22\xa2\x7d\x7b\x8f\xc3\x3c\xc1\xa1\x58" +
		"\xcb\x9b\x78\xbe\x72\x9d\xf0\x18\xb7\xfe\x8f\xda\xb5\xd7\x4a\xb5\x37\x71\x97\x00\xc6\x25\x9c\xd1\x10\xe5\xa1\x54" +
		"\x82\x37\xbc\x4c\x78\x62\xdb\xee\xe8\x7b\x2c\x56\xf1\xa0\x2e\xf5\x53\xd6\xe5\xf4\xb2\x27\xff\x61\xbe\x72\x2b\x2f" +
		"\x4d\x82\x03\x58\x72\x26\xe4\x9b\xb2\x49\xcb\xf4\xfb\xe9\xcf\x0b\xdf\x01\x00\x00\xff\xff\x1a\x99\x4d\x0f\x07\x01" +
		"\x00\x00")

func bindataPetscgmresMakefileBytes() ([]byte, error) {
	return bindataRead(
		_bindataPetscgmresMakefile,
		"petsc-gmres/makefile",
	)
}

func bindataPetscgmresMakefile() (*asset, error) {
	bytes, err := bindataPetscgmresMakefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "petsc-gmres/makefile",
		size:        263,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1476884853, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"petsc-gmres/GMRES.c":  bindataPetscgmresGMRESc,
	"petsc-gmres/makefile": bindataPetscgmresMakefile,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"petsc-gmres": {Func: nil, Children: map[string]*bintree{
		"GMRES.c":  {Func: bindataPetscgmresGMRESc, Children: map[string]*bintree{}},
		"makefile": {Func: bindataPetscgmresMakefile, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
