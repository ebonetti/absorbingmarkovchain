// Code generated by go-bindata. DO NOT EDIT.
// sources:
// gmres-petsc/GMRES.c
// gmres-petsc/makefile

package gmres


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGmrespetscGMRESc = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x7f\x6f\xdb\x36\x10\xfd\x5f\x9f\xe2\xa6\x01\x86\x6c\xb0\x76\x02" +
	"\x6c\xc3\x30\x2f\x1d\x1c\xc7\x6e\x82\xc4\xb5\x26\x65\xe9\x80\xb6\x30\x28\xe9\x24\x13\x91\x44\x82\xa4\xd3\xb8\x43" +
	"\xbe\xfb\x40\xca\xbf\x2d\x39\x01\xaa\x3f\x84\x44\xbc\x77\xef\xf1\xf1\xee\x68\xa5\xa9\x66\x31\xc4\x73\x2a\x61\x8e" +
	"\xb9\xf8\xfc\x15\x2e\xc0\xfd\x47\x21\x7c\x98\x04\xa3\x10\x34\x07\xc5\xf3\x27\x84\x9c\x95\x48\x25\xa8\xa5\xd2\x58" +
	"\xa8\x2f\xe5\x97\xd2\xed\x3b\xce\xcf\xac\x8c\xf3\x45\x82\xf0\xa7\x40\xad\xe2\x47\x25\xba\xf3\xf7\x87\x5f\x23\x9a" +
	"\x99\xaf\x8e\xa3\x97\x02\x13\x4c\x41\x69\xb9\x88\xf5\x7f\x0e\x00\x54\xcc\xdb\x87\xa5\x25\x2d\xf0\xb3\x3f\xba\x0f" +
	"\x87\xb3\xc9\xe0\xdf\x99\x3f\xb8\xbf\x9e\xdd\x8d\x3e\x7e\x25\xbc\x71\xa9\xef\xbc\x80\x4f\x25\x2d\x50\xa3\xec\x3b" +
	"\x0e\x2b\x35\x14\x94\x95\x9e\xf9\x83\xca\x2c\x26\x96\xa5\xd3\xa1\x32\x7b\x6a\x43\x45\xec\x1b\x69\x0f\x0c\xbf\xa1" +
	"\xac\x88\x13\xc2\xd3\xa4\x0f\xc7\x4f\xaf\x97\xb2\x1c\xe1\xc9\xc6\x5a\xec\x03\xc6\xbb\x01\x51\x1d\x6a\x8d\x0d\xae" +
	"\x43\xa0\x65\x02\x54\x08\xc9\x9f\x8d\x9b\x0b\xcd\x78\x09\x9e\x9a\x53\xc9\xca\x0c\x0a\x2c\xb8\x5c\xb6\x6d\xe2\x09" +
	"\xd5\xbb\xe8\xc1\xa9\xc4\x7b\x27\x02\x05\xd5\x92\x3d\xdb\x24\xb7\xa1\xbf\x1b\xf9\xa8\x44\x53\x9a\x6d\x12\x73\xc6" +
	"\x12\x62\x5e\x6a\x7c\xd6\x95\x3f\xc3\xbd\x50\x11\x37\x6a\xe9\xf5\xfc\xe1\x3e\xd4\x58\x3b\x92\x92\xcb\x21\x4f\x10" +
	"\x18\x4a\xd9\xaf\x16\xd6\x87\x54\x01\x3b\xc2\xfc\xaf\xfa\x5b\xd0\x25\xcd\xd6\x9e\xd2\xac\xef\xd8\x05\x03\x87\x8b" +
	"\x6a\xfd\xa6\x64\x9a\xd1\x9c\x7d\x47\xaf\x65\x0f\xd6\xbc\x9f\x88\x67\xce\xb7\xd3\x3e\x23\xa6\x84\xdb\xfd\xe1\xf5" +
	"\xed\x28\x08\xfe\xf6\x0c\xb2\x6d\x65\x1f\x67\xba\xa4\xd9\x50\x22\xd5\xe8\x55\x05\x35\x9c\x4e\x26\xb3\x4f\xd3\xe0" +
	"\xee\x8a\x28\xf6\x1d\x79\xea\x6d\xc4\xb6\x49\x2b\xa2\xd9\x61\xda\xba\x8c\x1f\x50\x5f\x51\x4d\xbd\x88\x66\xc4\x7b" +
	"\xe2\x2c\xe9\x74\xda\xad\x6a\x93\x47\xf0\x3a\x7c\x88\xfa\x23\x2d\xd0\xe2\xdd\x0d\xff\x25\xcd\x5c\xe2\x1a\x83\x29" +
	"\x2b\x15\x88\xf5\x77\x05\x29\x97\xa0\x62\xc9\x84\x76\xdf\x22\x2f\xc0\x8c\x29\x8d\x32\xd4\xa6\xf0\x2c\xcb\x4a\xdd" +
	"\xbb\xf7\x55\xe3\x91\xe3\xee\x22\xee\x20\xea\x0a\xad\x62\x97\xb8\x2c\x75\x89\x6b\x14\x02\x4f\x81\x95\x62\xa1\xc1" +
	"\xb6\x86\x79\xfd\xb0\x02\xde\xac\x40\xf1\xbc\x5b\x50\x9d\xd3\xc8\x25\x2e\xdf\x15\xc1\x17\xfa\x15\x15\x4e\x55\xa2" +
	"\x30\x15\x58\xee\x68\x3e\x52\x57\x8d\x82\x4b\x56\x52\xb9\x34\xb1\xc7\x75\x71\x60\xd5\xf8\xe6\x6e\x34\x9b\x4c\xaf" +
	"\x46\xb3\x60\x34\xb8\x22\x2d\x96\x26\xb5\x16\xac\xb9\x77\xa4\x36\x90\x0f\xc2\xe1\xcd\xcd\x69\xee\x95\x49\x2d\x6e" +
	"\xc8\xe0\x15\xc3\xab\xac\xfe\x42\xcd\xc7\x5c\x16\x54\x7b\x3c\x4d\x56\xfe\x3e\xdc\x8c\x3e\x8d\x82\x99\x65\x9c\x4d" +
	"\x06\xf7\x77\x83\xcb\xe3\x7c\x6b\xf9\x77\x9c\x26\xa0\xe7\xb8\x1a\x32\xdd\x5d\xa2\x09\xd5\x4d\x7d\xd4\x1a\x9c\x2a" +
	"\x89\x09\xd5\x26\xaf\x37\x20\x75\xc6\xad\xa9\xc3\x6a\x30\x71\x61\x66\xa6\xb2\x83\x54\xf3\x1c\x25\x2d\x63\x54\x7b" +
	"\x42\x6e\x43\xbf\x51\xc8\xa3\x3a\x9a\x0a\x07\xd0\x10\xf5\xfd\x52\xa0\xf7\xa8\x04\xb9\x0d\x7d\x7b\xf9\x1d\x42\x7a" +
	"\xbd\x68\x09\x09\xa6\x74\x91\xeb\xee\x21\x77\x88\x7a\x2a\x50\x52\xcd\xa5\xb2\x59\x06\xe4\xe4\xf6\x57\x9c\x9b\xbd" +
	"\x58\xcc\x39\xbe\xfb\xdd\xbc\xce\x7f\x23\xe7\xf8\x0b\xf9\xf5\xec\xec\xe4\xd8\x30\x42\x51\xfb\x43\x8b\x6d\x89\xf8" +
	"\x64\x07\x0e\xd7\x5b\x14\x31\xf1\x87\xe1\x34\x78\x2d\x75\x88\x7a\x2c\x79\x31\xad\xac\xf7\xea\x3c\xdc\x45\x3c\x60" +
	"\xdc\xe8\x7f\x54\xab\xcc\x4c\x2f\x6f\x8b\xb6\xd5\x10\x55\xd5\x00\x3f\xd9\x4b\x03\x6a\x57\xdb\xd5\x05\x7e\xa0\xd6" +
	"\x14\x8a\x35\x22\x22\xf5\x74\xfb\x5a\x4d\x6f\x78\x11\xe1\x0d\x4d\xfb\x62\xdf\xbb\x0b\x70\x71\x01\xd5\xce\x46\x41" +
	"\x30\xb3\xcd\x6f\xfa\xfe\x2f\x38\x83\x3f\x60\xbf\x6a\xc7\x12\x11\xbe\x71\xf9\x08\x4a\xd0\x18\xbb\x0d\x8d\x79\x85" +
	"\x4a\x4b\xbe\xf4\x1a\x27\xc7\x31\x64\x9c\x2f\xd4\xdc\x6b\x12\x5d\xd3\xfb\x5c\x6c\x5b\xff\xad\x03\x63\xa3\xeb\x15" +
	"\x9e\xdb\xd0\xdf\x84\xbe\xd2\x61\x0f\x18\x6f\x42\xeb\x4f\x67\x3b\x15\x36\x81\x27\xfb\x67\x7d\xa3\x6c\xd3\xbe\xe1" +
	"\x8a\x1e\xb3\xb2\xfa\xf1\xb0\x5a\x93\xa8\x17\xb2\x84\xb3\xbe\xf3\xe2\xfc\x1f\x00\x00\xff\xff\x43\x55\x5b\x1b\x0a" +
	"\x0b\x00\x00")

func bindataGmrespetscGMREScBytes() ([]byte, error) {
	return bindataRead(
		_bindataGmrespetscGMRESc,
		"gmres-petsc/GMRES.c",
	)
}



func bindataGmrespetscGMRESc() (*asset, error) {
	bytes, err := bindataGmrespetscGMREScBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "gmres-petsc/GMRES.c",
		size: 2826,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1546775110, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataGmrespetscMakefile = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\x3f\x4f\x87\x30\x10\x86\x67\xee\x53\xdc\xc0\x0a\xdd\xd9\x14\xab" +
	"\x36\x80\x36\x85\xc1\x8d\x94\x5a\x62\xe3\xa5\x25\xfc\x71\x21\xfd\xee\xa6\x12\x75\xfd\x4d\x97\x37\xf7\x3c\xef\x9d" +
	"\xf3\x86\x8e\x77\x8b\xf9\x29\xf9\xd0\xd7\xe3\x83\x50\x91\x91\x9b\xd8\x62\xf7\xcd\x30\x13\xfc\xcc\xbe\xf4\xea\xf4" +
	"\x44\x76\x83\x5b\xe8\xf5\x48\x24\x68\xa2\x0a\x9f\x3a\xc5\xfb\x32\x20\x9a\x8f\xcf\xb0\xec\x1b\x64\xf9\x59\xb7\xe2" +
	"\xa5\xe1\x2a\x62\x11\xae\xfd\x3f\xf5\x5b\xdb\xf4\x72\x6c\xc5\x7d\x04\x58\x0f\x5f\xa1\x26\x4a\x62\x27\x05\x7f\xe3" +
	"\x75\xc4\x92\x5d\x5e\xe1\x66\xcc\x4f\xf1\x28\xef\x86\xe7\x54\x97\xd2\xeb\x95\x20\x03\x43\x56\xfb\xf4\x45\x72\x55" +
	"\x17\xff\xce\xfc\x4c\xf8\x0e\x00\x00\xff\xff\x8f\x52\x00\xee\xf9\x00\x00\x00")

func bindataGmrespetscMakefileBytes() ([]byte, error) {
	return bindataRead(
		_bindataGmrespetscMakefile,
		"gmres-petsc/makefile",
	)
}



func bindataGmrespetscMakefile() (*asset, error) {
	bytes, err := bindataGmrespetscMakefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "gmres-petsc/makefile",
		size: 249,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1522159232, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"gmres-petsc/GMRES.c":  bindataGmrespetscGMRESc,
	"gmres-petsc/makefile": bindataGmrespetscMakefile,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"gmres-petsc": {Func: nil, Children: map[string]*bintree{
		"GMRES.c": {Func: bindataGmrespetscGMRESc, Children: map[string]*bintree{}},
		"makefile": {Func: bindataGmrespetscMakefile, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
