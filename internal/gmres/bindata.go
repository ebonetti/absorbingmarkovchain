// Code generated by go-bindata. DO NOT EDIT.
// sources:
// gmres-petsc/GMRES.c
// gmres-petsc/makefile

package gmres


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGmrespetscGMRESc = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xff\x6f\xdb\xb6\x13\xfd\x5d\x7f\xc5\x7d\xf4\x01\x0c\xd9\x60\xed" +
	"\x14\xd8\x86\x61\x5e\x3a\x38\x8a\xd2\x04\x89\x6b\x4d\xca\xd2\x01\x6d\x61\x50\xd2\x49\x26\x62\x89\x04\x49\xa7\x71" +
	"\x87\xfc\xef\x03\x29\x7f\xb7\xe4\x04\x98\x7e\x10\x12\xf1\xde\xbd\xc7\xc7\xbb\xa3\x95\xa6\x9a\xa5\x90\xce\xa8\x84" +
	"\x19\xce\xc5\x97\x6f\x70\x0e\xee\x5f\x0a\xe1\xe3\x38\x0a\x62\xd0\x1c\x14\x9f\x3f\x21\xcc\x59\x85\x54\x82\x5a\x2a" +
	"\x8d\xa5\xfa\x5a\x7d\xad\xdc\xa1\xe3\xfc\x9f\x55\xe9\x7c\x91\x21\xfc\x2e\x50\xab\xf4\x51\x89\xfe\xec\xc3\xe1\xd7" +
	"\x84\x16\xe6\xab\xe3\xe8\xa5\xc0\x0c\x73\x50\x5a\x2e\x52\xfd\x8f\x03\x00\x35\xf3\xf6\x61\x79\x45\x4b\xfc\x12\x06" +
	"\xf7\xb1\x3f\x1d\x8f\xfe\x9e\x86\xa3\xfb\xeb\xe9\x5d\xf0\xe9\x1b\xe1\xad\x4b\x43\xe7\x05\x42\x2a\x69\x89\x1a\xe5" +
	"\xd0\x71\x58\xa5\xa1\xa4\xac\xf2\xcc\x1f\x54\x16\x29\xb1\x2c\xbd\x1e\x95\xc5\x53\x17\x6a\xe2\xd0\x48\x7b\x60\xf8" +
	"\x1d\x65\x4d\x9c\x11\x9e\x67\x43\x38\x7e\x06\x83\x9c\xcd\x11\x9e\x6c\xac\xc5\x3e\x60\xba\x1b\x90\x34\xa1\xd6\xd8" +
	"\xe8\x3a\x06\x5a\x65\x40\x85\x90\xfc\xd9\xb8\xb9\xd0\x8c\x57\xe0\xa9\x19\x95\xac\x2a\xa0\xc4\x92\xcb\x65\xd7\x26" +
	"\x1e\x53\xbd\x8b\x1e\x9d\x4a\xbc\x77\x22\x50\x52\x2d\xd9\xb3\x4d\x72\x1b\x87\xbb\x91\x8f\x4a\xb4\xa5\xd9\x26\x31" +
	"\x67\x2c\x21\xe5\x95\xc6\x67\x5d\xfb\xe3\xef\x85\x8a\xb4\x55\xcb\x60\x10\xfa\xfb\x50\x63\x6d\x20\x25\x97\x3e\xcf" +
	"\x10\x18\x4a\x39\xac\x17\xd6\x87\x54\x03\x7b\xc2\xfc\xaf\x86\x5b\xd0\x05\x2d\xd6\x9e\xd2\x62\xe8\xd8\x05\x03\x87" +
	"\xf3\x7a\xfd\xa6\x62\x9a\xd1\x39\xfb\x81\x5e\xc7\x1e\xac\x79\x3f\x11\xcf\x9c\x6f\xaf\x7b\x46\x4c\x09\x77\x87\xfe" +
	"\xf5\x6d\x10\x45\x7f\x7a\x06\xd9\xb5\xb2\x8f\x33\x5d\xd0\xc2\x97\x48\x35\x7a\x75\x41\xf9\x93\xf1\x78\xfa\x79\x12" +
	"\xdd\x5d\x12\xc5\x7e\x20\xcf\xbd\x8d\xd8\x2e\xe9\x24\xb4\x38\x4c\xdb\x94\xf1\x23\xea\x4b\xaa\xa9\x97\xd0\x82\x78" +
	"\x4f\x9c\x65\xbd\x5e\xb7\x53\x6f\xf2\x08\xde\x84\x8f\x51\x7f\xa2\x25\x5a\xbc\xbb\xe1\xbf\xa0\x85\x4b\x5c\x63\x30" +
	"\x65\x95\x02\xb1\xfe\xae\x20\xe7\x12\x54\x2a\x99\xd0\xee\x5b\xe4\x45\x58\x30\xa5\x51\xc6\xda\x14\x9e\x65\x59\xa9" +
	"\x7b\xf7\xa1\x6e\x3c\x72\xdc\x5d\xc4\x1d\x25\x7d\xa1\x55\xea\x12\x97\xe5\x2e\x71\x8d\x42\xe0\x39\xb0\x4a\x2c\x34" +
	"\xd8\xd6\x30\xaf\xff\xac\x80\xb7\x2b\x50\x7c\xde\x2f\xa9\x9e\xd3\xc4\x25\x2e\xdf\x15\xc1\x17\xfa\x15\x15\x4e\x5d" +
	"\xa2\x30\x11\x58\xed\x68\x3e\x52\x57\x8f\x82\x0b\x56\x51\xb9\x34\xb1\xc7\x75\x71\x60\xd5\xd5\xcd\x5d\x30\x1d\x4f" +
	"\x2e\x83\x69\x14\x8c\x2e\x49\x87\xe5\x59\xa3\x05\x6b\xee\x1d\xa9\x2d\xe4\xa3\xd8\xbf\xb9\x39\xcd\xbd\x32\xa9\xc3" +
	"\x0d\x19\xbc\x62\x78\x9d\x35\x5c\xa8\xd9\x15\x97\x25\xd5\x1e\xcf\xb3\x95\xbf\x0f\x37\xc1\xe7\x20\x9a\x5a\xc6\xe9" +
	"\x78\x74\x7f\x37\xba\x38\xce\xb7\x96\x7f\xc7\x69\x06\x7a\x86\xab\x21\xd3\xdf\x25\x1a\x53\xdd\xd6\x47\x9d\xd1\xa9" +
	"\x92\x18\x53\x6d\xf2\x7a\x23\xd2\x64\xdc\x9a\x3a\xae\x07\x13\x17\x66\x66\x2a\x3b\x48\x35\x9f\xa3\xa4\x55\x8a\x6a" +
	"\x4f\xc8\x6d\x1c\xb6\x0a\x79\x54\x47\x53\xe1\x00\x1a\xa3\xbe\x5f\x0a\xf4\x1e\x95\x20\xb7\x71\x68\x2f\xbf\x43\xc8" +
	"\x60\x90\x2c\x21\xc3\x9c\x2e\xe6\xba\x7f\xc8\x1d\xa3\x9e\x08\x94\x54\x73\xa9\x6c\x96\x11\x39\xb9\xfd\x15\xe7\x66" +
	"\x2f\x16\xf3\x1e\xdf\xfd\x6a\x5e\xef\x7f\x21\xef\xf1\x27\xf2\xf3\xd9\xd9\xc9\xb1\x61\x84\xa2\x0e\x7d\x8b\xed\x88" +
	"\xf4\x64\x07\xfa\xeb\x2d\x8a\x94\x84\x7e\x3c\x89\x5e\x4b\x1d\xa3\xbe\x92\xbc\x9c\xd4\xd6\x7b\x4d\x1e\xee\x22\x1e" +
	"\x30\x6d\xf5\x3f\x69\x54\x66\xa6\x97\xb7\x45\xdb\x6a\x48\xea\x6a\x80\xff\xd9\x4b\x03\x1a\x57\xbb\xf5\x05\x7e\xa0" +
	"\xd6\x14\x8a\x35\x22\x21\xcd\x74\xfb\x5a\x4d\x6f\x78\x09\xe1\x2d\x4d\xfb\x62\xdf\xbb\x0b\x70\x7e\x0e\xf5\xce\x82" +
	"\x28\x9a\xda\xe6\x37\x7d\xff\x07\x9c\xc1\x6f\xb0\x5f\xb5\x57\x12\x11\xbe\x73\xf9\x08\x4a\xd0\x14\xfb\x2d\x8d\x79" +
	"\x89\x4a\x4b\xbe\xf4\x5a\x27\x47\x43\x2f\x73\xb1\x6d\xe5\xb7\x0e\x80\x0d\x4f\xdb\x66\xb7\x2e\x6e\x42\x5f\xe9\x98" +
	"\x07\x4c\x37\xa1\xcd\x6e\x6f\xbb\x7c\x13\x78\xb2\x1f\xd6\x37\xc4\x36\xed\x1b\xae\xdc\x2b\x56\xd5\x3f\x06\x56\x6b" +
	"\x12\xf5\x42\x56\x70\x36\x74\x5e\x9c\x7f\x03\x00\x00\xff\xff\xaa\xc0\x5c\xbf\xda\x0a\x00\x00")

func bindataGmrespetscGMREScBytes() ([]byte, error) {
	return bindataRead(
		_bindataGmrespetscGMRESc,
		"gmres-petsc/GMRES.c",
	)
}



func bindataGmrespetscGMRESc() (*asset, error) {
	bytes, err := bindataGmrespetscGMREScBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "gmres-petsc/GMRES.c",
		size: 2778,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1522159395, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataGmrespetscMakefile = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\x3f\x4f\x87\x30\x10\x86\x67\xee\x53\xdc\xc0\x0a\xdd\xd9\x14\xab" +
	"\x36\x80\x36\x85\xc1\x8d\x94\x5a\x62\xe3\xa5\x25\xfc\x71\x21\xfd\xee\xa6\x12\x75\xfd\x4d\x97\x37\xf7\x3c\xef\x9d" +
	"\xf3\x86\x8e\x77\x8b\xf9\x29\xf9\xd0\xd7\xe3\x83\x50\x91\x91\x9b\xd8\x62\xf7\xcd\x30\x13\xfc\xcc\xbe\xf4\xea\xf4" +
	"\x44\x76\x83\x5b\xe8\xf5\x48\x24\x68\xa2\x0a\x9f\x3a\xc5\xfb\x32\x20\x9a\x8f\xcf\xb0\xec\x1b\x64\xf9\x59\xb7\xe2" +
	"\xa5\xe1\x2a\x62\x11\xae\xfd\x3f\xf5\x5b\xdb\xf4\x72\x6c\xc5\x7d\x04\x58\x0f\x5f\xa1\x26\x4a\x62\x27\x05\x7f\xe3" +
	"\x75\xc4\x92\x5d\x5e\xe1\x66\xcc\x4f\xf1\x28\xef\x86\xe7\x54\x97\xd2\xeb\x95\x20\x03\x43\x56\xfb\xf4\x45\x72\x55" +
	"\x17\xff\xce\xfc\x4c\xf8\x0e\x00\x00\xff\xff\x8f\x52\x00\xee\xf9\x00\x00\x00")

func bindataGmrespetscMakefileBytes() ([]byte, error) {
	return bindataRead(
		_bindataGmrespetscMakefile,
		"gmres-petsc/makefile",
	)
}



func bindataGmrespetscMakefile() (*asset, error) {
	bytes, err := bindataGmrespetscMakefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "gmres-petsc/makefile",
		size: 249,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1522159232, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"gmres-petsc/GMRES.c":  bindataGmrespetscGMRESc,
	"gmres-petsc/makefile": bindataGmrespetscMakefile,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"gmres-petsc": {Func: nil, Children: map[string]*bintree{
		"GMRES.c": {Func: bindataGmrespetscGMRESc, Children: map[string]*bintree{}},
		"makefile": {Func: bindataGmrespetscMakefile, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
